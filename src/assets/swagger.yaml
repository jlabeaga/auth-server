swagger: "2.0"
info:
  version: "0.0.1"
  title: Auth server
# during dev, should point to your local machine
host: localhost:7000
# basePath prefixes all resource paths
basePath: /api
tags:
  - name: "login"
    description: "Login/Logout/Register user operations"
  - name: "me"
    description: "Operations on the logged in user personal profile"
  - name: "admin"
    description: "CRUD Operations on users made by the Admin"
#
schemes:
  # tip: remove http to make production-grade
  - http
  - https
# format of bodies a client can send (Content-Type)
consumes:
  - application/json
# format of the responses to the client (Accepts)
produces:
  - application/json
paths:
  /auth/register:
    post:
      tags:
        - "login"
      summary: "Register a new user in the auth server"
      description: "Register a new user in the auth server"
      operationId: "register"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User data to be created"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Invalid input"
  /auth/login:
    post:
      tags:
        - "login"
      summary: "Attempt to login a user"
      description: "Attempt to login a user"
      operationId: "login"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User data to be created"
          required: true
          schema:
            $ref: "#/definitions/Login"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Result"
        "500":
          description: "Invalid input"
  /auth/logout/{jwtToken}:
    post:
      tags:
        - "login"
      summary: "Logout a user and invalidate JWT token"
      description: "Logout a user and invalidate JWT token"
      operationId: "logout"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "path"
          name: "jwtToken"
          description: "JWT token to be revoked"
          required: true
          type: "string"
      responses:
        "201":
          description: "successful operation"
          schema:
            type: "string"
        "500":
          description: "Invalid input"
  /admin/:
    get:
      security:
        - bearer_auth: []
      tags:
        - "admin"
      summary: "List users registered in the auth server"
      description: "List users registered in the auth server"
      operationId: "findUsers"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      responses:
        "201":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        "500":
          description: "Invalid input"
    post:
      security:
        - bearer_auth: []
      tags:
        - "admin"
      summary: "Create new user in the auth server"
      description: "Create new user in the auth server"
      operationId: "createUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - in: "body"
          name: "body"
          description: "User data to be created"
          required: true
          schema:
            $ref: "#/definitions/UserInputAdmin"
      responses:
        "201":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
            description: "Data of created user"
        "500":
          description: "Invalid input"
  /admin/{userId}:
    get:
      security:
        - bearer_auth: []
      tags:
        - "admin"
      summary: "Find user by ID"
      description: "Returns a single user"
      operationId: "findUserById"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user to return"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
    patch:
      security:
        - bearer_auth: []
      tags:
        - "admin"
      summary: "Updates a user data"
      description: "Username or email can not be duplicated"
      operationId: "updateUser"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "ID of user that needs to be updated"
          required: true
          type: "integer"
          format: "int64"
        - name: "userData"
          in: "body"
          description: "Updated data of the user"
          required: false
          schema:
            $ref: "#/definitions/UserInputAdmin"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "404":
          description: "User not found"
        "500":
          description: "Invalid input"
    delete:
      security:
        - bearer_auth: []
      tags:
        - "admin"
      summary: "Deletes a user"
      description: "Deletes a user from the auth server"
      operationId: "deleteUser"
      produces:
        - "application/json"
      parameters:
        - name: "userId"
          in: "path"
          description: "User id to delete"
          required: true
          type: "integer"
          format: "int64"
      responses:
        "500":
          description: "Invalid input"

  /me:
    get:
      security:
        - bearer_auth: []
      tags:
        - "me"
      summary: "Retrieve the data of the logged in user"
      description: "Retrieve the data of the logged in user"
      operationId: "fetchMe"
      produces:
        - "application/json"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Generic error"
    patch:
      security:
        - bearer_auth: []
      tags:
        - "me"
      summary: "Updates the data of the logged in user"
      description: "Username or email can not be duplicated"
      operationId: "updateMe"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "userData"
          in: "body"
          description: "Updated data of the logged in user"
          required: true
          schema:
            $ref: "#/definitions/UserInput"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        "500":
          description: "Invalid input"
    delete:
      security:
        - bearer_auth: []
      tags:
        - "me"
      summary: "Disables the logged in user"
      description: "Disables the logged in user"
      operationId: "disableMe"
      produces:
        - "application/json"
      responses:
        "500":
          description: "Invalid input"
  /swagger:
    x-swagger-pipe: swagger_raw

securityDefinitions:
  bearer_auth: # arbitrary name for the security
    type: apiKey
    name: Authorization
    in: header
  # securitySchemes: # only for OpenApi v3
  #   bearer_auth: # arbitrary name for the security scheme
  #     type: http
  #     scheme: bearer
  #     bearerFormat: JWT # optional, arbitrary value for documentation purposes
  # complex objects have schema definitions
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "user1"
      email:
        type: "string"
        example: "user1@hotmail.com"
      role:
        type: "string"
        example: "USER"
        enum:
          - "USER"
          - "ADMIN"
      enabled:
        type: "boolean"
        example: "true"
  UserInput:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "user1"
      password:
        type: "string"
        example: "user1"
      email:
        type: "string"
        example: "user1@hotmail.com"
  UserInputAdmin:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
        example: "user1"
      password:
        type: "string"
        example: "user1"
      email:
        type: "string"
        example: "user1@hotmail.com"
      role:
        type: "string"
        example: "USER"
        enum:
          - "USER"
          - "ADMIN"
      enabled:
        type: "boolean"
        example: "true"
  Login:
    type: "object"
    required:
      - username
      - password
    properties:
      username:
        type: "string"
        example: "user1"
      password:
        type: "string"
        example: "user1"
  Result:
    type: object
    properties:
      status:
        type: string
        enum:
          - "success"
          - "error"
      message:
        type: string
      data:
        type: object
      error:
        $ref: "#/definitions/TicketError"
    required:
      - status
      - message
  TicketError:
    type: object
    properties:
      message:
        type: string
      name:
        type: string
      ticket:
        type: string
      stack:
        type: string
